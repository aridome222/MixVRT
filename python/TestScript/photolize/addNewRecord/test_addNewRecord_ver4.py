# data属性による指定＋HTMLから一致する要素を取得し保存
# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
import time
from bs4 import BeautifulSoup
import re
from selenium.webdriver.common.keys import Keys
import json
import os
from datetime import datetime
import difflib


class TestAddNewRecord_ver4():
  def setup_method(self, method):
    options = Options()
    # options.add_argument('--headless')  # ヘッドレスモードでブラウザを起動
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    self.driver = webdriver.Remote(command_executor='http://chrome:4444/wd/hub', options=options)
    self.driver.implicitly_wait(10) # 10秒まで待機する
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_addNewRecord(self):
    self.driver.get("https://saruya:saruya@staging-user.photolize.jp/login/basic_auth")
    self.driver.get("https://staging-user.photolize.jp/login")
    self.driver.set_window_size(1463, 1032)
    self.driver.find_element(By.ID, "input-7").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".v-btn__content")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "input-7").send_keys("company_code26")
    self.driver.find_element(By.CSS_SELECTOR, ".v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "input-11").send_keys("aridome")
    self.driver.find_element(By.ID, "input-14").send_keys("aridome")
    element = self.driver.find_element(By.CSS_SELECTOR, ".btn > .v-btn__content")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".btn > .v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, ".py-0:nth-child(2) .relative")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.execute_script("window.scrollTo(0,317)")
    element = self.driver.find_element(By.CSS_SELECTOR, ".py-0:nth-child(12) .v-list-item__title")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".py-0:nth-child(12) .v-list-item__title").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.LINK_TEXT, "新規レコード追加").click()

    # ダイアログが開く前のHTMLデータを取得
    # before_dialog_html = self.driver.page_source
    before_dialog_txt = get_id_from_body(self)

    element = self.driver.find_element(By.CSS_SELECTOR, ".input").click()

    # ダイアログが開かれた後のHTMLデータを取得
    # after_dialog_html = self.driver.page_source
    after_dialog_txt = get_id_from_body(self)

    # ダイアログが開かれるまで待機
    new_window_handle = self.driver.window_handles[-1]
    self.driver.switch_to.window(new_window_handle)

    # ダイアログ画面のHTMLデータを取得
    # dialog_html = self.driver.page_source
    dialog_txt = get_id_from_body(self)

    # 元の画面に戻るために元のウィンドウハンドルを使用して切り替える
    original_window_handle = self.driver.window_handles[0]
    self.driver.switch_to.window(original_window_handle)

    # # htmlファイルにHTMLデータを出力
    # save_html_data("before_dialog_html", before_dialog_html)
    # save_html_data("after_dialog_html", after_dialog_html)
    # save_html_data("dialog_html", dialog_html)

    # # txtファイルに2つのHTMLデータの差異を出力
    # save_diff_html_data(before_dialog_html, after_dialog_html)

    # txtファイルに2つのHTMLテキストデータの差異を出力
    save_diff_id(before_dialog_txt, after_dialog_txt)
    save_diff_id(before_dialog_txt, dialog_txt)

    element = self.driver.find_element(By.XPATH, "/html/body/div/div[2]/div[6]/div/div/div[1]/div/span/span/div/div/div[1]/div/input")
    # element = self.driver.find_element(By.CSS_SELECTOR, "[data-v-a41ff850]")
    # element = self.driver.find_element(By.XPATH, "//*[@data-v-a41ff850]")
    self.driver.execute_script("arguments[0].click();", element)


    # element = self.driver.find_element(By.CSS_SELECTOR, ".v-dialog__content:nth-child(6) .v-card__actions .v-btn__content")
    # actions = ActionChains(self.driver)
    # actions.move_to_element(element).perform()
    element = self.driver.find_element(By.XPATH, "/html/body/div/div[2]/div[6]/div/div/div[1]/div/span/span/div/div/div[1]/div/input")
    # element = self.driver.find_element(By.XPATH, "//*[@data-v-a41ff850 and @class=\"v-text-field__slot\"]")
    # キーボードのショートカットで入力内容を全選択
    element.send_keys(Keys.CONTROL + "a")
    # キーボードのショートカットで入力内容を削除
    element.send_keys(Keys.DELETE)
    element.send_keys("お寿司")
    self.driver.find_element(By.CSS_SELECTOR, ".v-dialog__content:nth-child(6) .v-card__actions .v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".checkbox").click()
    # モーダル画面が表示されるまで少し待機
    time.sleep(0.5)
    self.driver.execute_script("window.scrollTo(0,200)")
    self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) .cbbox").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) .cbbox")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) .cbbox").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".v-dialog__content:nth-child(16) .v-card__actions .v-btn__content")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".v-dialog__content:nth-child(16) .v-card__actions .v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".radio").click()
    # モーダル画面が表示されるまで少し待機
    time.sleep(0.5)
    self.driver.find_element(By.CSS_SELECTOR, ".v-radio:nth-child(3) .v-input--selection-controls__ripple").click()
    self.driver.find_element(By.CSS_SELECTOR, ".v-dialog__content:nth-child(10) .v-card__actions .v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".v-btn--is-elevated > .v-btn__content")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".v-btn--is-elevated > .v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, ".theme--light:nth-child(2) > .v-btn__content")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".theme--light:nth-child(2) > .v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, ".v-card__actions:nth-child(2) .v-btn__content")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".v-card__actions:nth-child(2) .v-btn__content").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, ".v-avatar > img")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".v-avatar > img").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, ".v-btn--text")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".v-btn--text").click()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.close()
  
def save_matching_elements_to_txt(matches):
  # 保存先ディレクトリを指定
  output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "txt/")
  # フォルダが存在しない場合は作成
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)
  # 現在の日付を取得してフォーマット
  current_date = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
  # ファイル名を生成
  output_file_name = f"matching_elements_{current_date}.txt"
  
  # txtファイルに出力
  output_file_path = os.path.join(output_dir, output_file_name)
  with open(output_file, 'w', encoding='utf-8') as f:
      for match in matches:
          f.write(str(match) + '\n')
  
  print(f"idで一致した要素を{output_file_path}に保存しました")
  return output_file_path

def save_matching_elements_to_json(matches):
  # 保存先ディレクトリを指定
  output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "json/")
  # フォルダが存在しない場合は作成
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)
  # 現在の日付を取得してフォーマット
  current_date = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
  # ファイル名を生成
  output_file_name = f"matching_elements_{current_date}.json"

  # 一致する要素をリストに格納
  matching_elements = []
  for match in matches:
      matching_elements.append(str(match))
  
  # JSONファイルに出力
  output_file_path = os.path.join(output_dir, output_file_name)
  with open(output_file_path, 'w', encoding='utf-8') as f:
      json.dump(matching_elements, f, ensure_ascii=False, indent=4)
  
  print(f"一致する要素を{output_file_path}に保存しました")

def save_html_data(file_name, html_data):
  # 保存先ディレクトリを指定
  output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "html_data/")
  # フォルダが存在しない場合は作成
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)
  # 現在の日付を取得してフォーマット
  current_date = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
  # ファイル名を生成
  output_file_name = f"{file_name}_{current_date}.html"
  
  # ファイルにHTMLデータを出力
  output_file_path = os.path.join(output_dir, output_file_name)
  with open(output_file_path, "w", encoding="utf-8") as f:
      f.write(html_data)

  print(f"HTMLデータを{output_file_path}に保存しました")

def save_diff_html_data(html_data_file, html_data_file_2):
  # 保存先ディレクトリを指定
  output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "html_diff/")
  # フォルダが存在しない場合は作成
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)
  # 現在の日付を取得してフォーマット
  current_date = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
  # ファイル名を生成
  output_file_name = f"diff_{current_date}.txt"

  # 差異を別ファイルに出力
  differ = difflib.Differ()
  diff = differ.compare(html_data_file.splitlines(), html_data_file_2.splitlines())

  output_file_path = os.path.join(output_dir, output_file_name)
  with open(output_file_path, "w", encoding="utf-8") as f:
      f.write("\n".join(diff))

  print(f"2つのHTMLデータの差異を{output_file_path}に保存しました")

def save_diff_id(txt_file_path, txt_file_path_2):
  # 保存先ディレクトリを指定
  output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "diff_id/")
  # フォルダが存在しない場合は作成
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)
  # 現在の日付を取得してフォーマット
  current_date = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
  # ファイル名を生成
  output_file_name = f"diff_id_{current_date}.txt"

  # ファイルを読み込んで内容を取得
  with open(txt_file_path, "r", encoding="utf-8") as f:
      txt_data = f.read()

  with open(txt_file_path_2, "r", encoding="utf-8") as f:
      txt_data_2 = f.read()

  # 差異を別ファイルに出力
  differ = difflib.Differ()
  diff = differ.compare(txt_data.splitlines(), txt_data_2.splitlines())

  output_file_path = os.path.join(output_dir, output_file_name)
  with open(output_file_path, "w", encoding="utf-8") as f:
      f.write("\n".join(diff))

  print(f"2つのHTMLテキストデータの差異を{output_file_path}に保存しました")

def get_id_from_body(self):
  # ページソースを取得
  page_source = self.driver.page_source

  # BeautifulSoupを使ってbody部分のみを抽出
  soup = BeautifulSoup(page_source, 'html.parser')
  body_content = soup.body

  # 正規表現オブジェクトを作成
  pattern = re.compile("id")

  # bodyから正規表現に一致するテキストを含む要素をすべて取得
  matches = body_content.find_all(attrs={"id": pattern})

  # 一致する要素を取得できたかどうかで異なる処理を行う
  if matches: # 取得できた場合
      print("一致する要素が見つかりました")
      # 一致する要素をtxtファイルに保存
      return save_matching_elements_to_txt(matches)
  else: # 取得できなかった場合
      print("一致する要素が見つかりませんでした")