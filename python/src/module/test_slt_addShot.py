# 単一行テキスト
# 編集画面で入力後、ビュー画面スクショ（設定を変えた時に実行すべきファイル）
# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
import time
from bs4 import BeautifulSoup
import re
from selenium.webdriver.common.keys import Keys
import json
import os
from datetime import datetime
import difflib
import subprocess
import sys


class Test_slt_input_addShot():
  def __init__(self, url=None):
    self.url = url

  def setup_method(self, method):
    options = Options()
    # options.add_argument('--headless')  # ヘッドレスモードでブラウザを起動
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    self.driver = webdriver.Remote(command_executor='http://chrome:4444/wd/hub', options=options)
    self.driver.implicitly_wait(10) # 10秒まで待機する
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_singlelinetext(self):    
    # photolizeにログインする
    self.driver.get(self.url)
    self.driver.set_window_size(1463, 1032)
    # time.sleep(3) # 目視確認
    # スクリーンショットをとる
    output_file_path = save_screenShot(self)  # ここで関数を呼び出し、戻り値を変数に格納
    # 画面を閉じる
    self.driver.close()
    return output_file_path

def save_screenShot(self):
  # 保存先ディレクトリを指定
  output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "img/")
  # フォルダが存在しない場合は作成
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)
      command = f"sudo chown -R aridome:aridome {output_dir}"
      # コマンドを実行
      subprocess.call(command, shell=True)

  # 現在の日付を取得してフォーマット
  current_date = datetime.now().strftime("%m-%d_%H-%M-%S")
  # ファイル名を生成
  output_file_name = f"url_img_{current_date}.png"

  # ファイルパスを作成
  output_file_path = os.path.join(output_dir, output_file_name)
  
  # スクロールバーが表示されないようにサイズを設定
  self.driver.set_window_size(1050, 1150) # 幅×高さ

  # 追加: ここでフルページのスクリーンショットを取る
  self.driver.save_screenshot(output_file_path)

  print("")
  print(f"webページのURLから取得した画像を{output_file_path}に保存しました")
  return output_file_path

if __name__ == "__main__":
    # Get the URL from the command line arguments
    url = sys.argv[1]

    # Call the Test_slt_input_addShot class with the URL
    test_slt = Test_slt_input_addShot(url)
    test_slt.setup_method(None)
    test_slt.test_singlelinetext()
    test_slt.teardown_method(None)