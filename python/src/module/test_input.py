# 入力画面を撮りたい時に使用
# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options
import time
from bs4 import BeautifulSoup
import re
from selenium.webdriver.common.keys import Keys
import json
import os
from datetime import datetime
import difflib
import subprocess


class Test_label_snapShot():
  def setup_method(self, method):
    options = Options()
    # options.add_argument('--headless')  # ヘッドレスモードでブラウザを起動
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    # options.add_argument('--blink-settings=imagesEnabled=false') # あらかじめChromeの画像を非表示にして開く
    self.driver = webdriver.Remote(command_executor='http://chrome:4444/wd/hub', options=options)
    self.driver.implicitly_wait(10) # 10秒まで待機する
    self.vars = {}

    # 録画を開始
    self.start_recording()
  
  def teardown_method(self, method):
    self.stop_recording()
    # 既存のティアダウンコード...
    self.driver.quit()
  
  def start_recording(self):
    # 録画ファイルの保存先を指定
    self.video_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "video/")
    if not os.path.exists(self.video_dir):
        os.makedirs(self.video_dir)
        command = f"sudo chown -R aridome:aridome {self.video_dir}"
        # コマンドを実行
        subprocess.call(command, shell=True)
    
    self.video_file_path = os.path.join(self.video_dir, "recording.mp4")
    # FFmpegを使用して画面録画を開始
    self.recording_process = subprocess.Popen(
        ["ffmpeg", "-f", "x11grab", "-i", ":11", self.video_file_path],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )

  def stop_recording(self):
    # FFmpegプロセスを終了して録画を停止
    self.recording_process.terminate()
    self.recording_process.wait()

  def test_Photolizeにログインする(self):
    # photolizeにログインする
    self.driver.get("https://saruya:saruya@staging-user.photolize.jp/login/basic_auth")
    self.driver.get("https://staging-user.photolize.jp/login")
    self.driver.set_window_size(1463, 1032)
    self.driver.find_element(By.ID, "input-7").click()
    self.driver.find_element(By.ID, "input-7").send_keys("company_code26")
    self.driver.find_element(By.CSS_SELECTOR, ".v-btn__content").click()
    self.driver.find_element(By.ID, "input-11").send_keys("aridome")
    self.driver.find_element(By.ID, "input-14").send_keys("aridome")
    self.driver.find_element(By.CSS_SELECTOR, ".btn > .v-btn__content").click()

    # ページのタイトルを取得
    title = self.driver.title
    # ページのタイトルが期待したものであることを確認
    assert title == "世界一簡単にフォームをつくろうphotolize", "Title does not match"

    # # 電話番号が表示されている要素を取得（ここでは仮の要素IDを使用）
    # phone_number = self.driver.find_element(By.ID, "phone-number").text

    # # 電話番号の形式をチェックする正規表現パターン
    # pattern = r"^\d{3}-\d{3}-\d{4}$"

    # # 電話番号が期待する形式に一致するか確認
    # assert re.match(pattern, phone_number), "Phone number format is incorrect"

    # # 有留アプリテストを選択
    # self.driver.find_element(By.XPATH, "/html/body/div/div[2]/div/div[2]/main/div/div[2]/div[2]/div/div[15]/a/div/div/div[2]/div").click()
    # # 直接飛ぶ
    # self.driver.get("https://staging-user.photolize.jp/appli/index?app_id=151")
    # # time.sleep(100)
    # # 最新の編集画面を選択
    # self.driver.find_element(By.XPATH, "/html/body/div/div[2]/div/div[2]/div/div[2]/div[2]/div[2]/div/div[1]/div[2]/div[3]/div[2]/div/div/div[1]/div[1]/div/a/span/i").click()
    # time.sleep(3)
    # save_screenShot(self)
    # # ログアウトする
    # self.driver.find_element(By.CSS_SELECTOR, ".v-avatar > img").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".v-btn--text > .v-btn__content").click()
    # 画面を閉じる
    self.driver.close()

def save_screenShot(self):
  # 保存先ディレクトリを指定
  output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "img/")
  # フォルダが存在しない場合は作成
  if not os.path.exists(output_dir):
      os.makedirs(output_dir)
      command = f"sudo chown -R aridome:aridome {output_dir}"
      # コマンドを実行
      subprocess.call(command, shell=True)
  # 現在の日付を取得してフォーマット
  current_date = datetime.now().strftime("%m-%d_%H-%M-%S")
  # ファイル名を生成
  output_file_name = f"SLT_view_b4_{current_date}.png"

  # ファイルパスを作成
  output_file_path = os.path.join(output_dir, output_file_name)

  # スクロールバーが表示されないようにサイズを設定
  self.driver.set_window_size(1050, 1150) # 幅×高さ

  # 追加: ここでフルページのスクリーンショットを取る
  self.driver.save_screenshot(output_file_path)

  # print("")
  # print(f"単一行テキストの配置画像を{output_file_path}に保存しました")
